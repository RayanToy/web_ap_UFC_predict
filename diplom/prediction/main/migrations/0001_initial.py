# Generated by Django 4.2.1 on 2023-06-04 15:13

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='features',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('criterion', models.CharField(choices=[('gini', 'gini'), ('entropy', 'entropy'), ('log_loss', 'log_loss')], default='entropy', max_length=8, verbose_name='Критерий')),
                ('max_depth', models.IntegerField(verbose_name='Глубина дерева')),
                ('min_samples_split', models.IntegerField(verbose_name='Минимум образцов для разделения узла')),
                ('min_samples_leaf', models.IntegerField(verbose_name='Минимум образцов для терминального узла')),
                ('solverLR', models.CharField(choices=[('lbfgs', 'lbfgs'), ('liblinear', 'liblinear'), ('newton-cg', 'newton-cg'), ('newton-cholesky', 'newton-cholesky'), ('sag', 'sag'), ('saga', 'saga')], default='lbfgs', max_length=15, verbose_name='Решатель')),
                ('max_iter', models.IntegerField(verbose_name='Максимальное количество итераций')),
                ('random_state', models.IntegerField(verbose_name='Показатель случайности выборки')),
                ('regularization', models.FloatField(verbose_name='Регуляризация')),
                ('solverLD', models.CharField(choices=[('svd', 'svd'), ('lsqr', 'lsqr'), ('eigen', 'eigen')], default='svd', max_length=5, verbose_name='Решатель')),
                ('covariance_estimator', models.BooleanField(default=True, verbose_name='Ковариационный оценщик')),
                ('shrinkage', models.IntegerField(default=None, verbose_name='Влияние выборки')),
                ('tol', models.IntegerField(verbose_name='Погрешность')),
                ('random_state_forest', models.IntegerField(verbose_name='Показатель случайности выборки')),
                ('max_depth_forest', models.IntegerField(verbose_name='Максимальная глубина деревьев')),
                ('n_estimators', models.IntegerField(verbose_name='Количество')),
                ('min_samples_split_forest', models.IntegerField(verbose_name='Минимум образцов для разделения узла')),
                ('n_neighbors', models.IntegerField(verbose_name='Количество соседей')),
                ('weights', models.CharField(choices=[('uniform', 'uniform'), ('distance', 'distance')], default='uniform', max_length=8, verbose_name='Весовая функция')),
                ('algorithm', models.CharField(choices=[('auto', 'auto'), ('ball_tree', 'ball_tree'), ('kd_tree', 'kd_tree'), ('brute', 'brute')], default='auto', max_length=9, verbose_name='Алгоритм')),
                ('p', models.IntegerField(verbose_name='Мощность Минковского')),
            ],
            options={
                'verbose_name': 'Набор признаков боя',
                'verbose_name_plural': 'Наборы признаков боя',
            },
        ),
    ]
